---
# Source: harbor/templates/chartmuseum/chartmuseum-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  CACHE_REDIS_PASSWORD: ""
---
# Source: harbor/templates/clair/clair-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-clair
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  config.yaml: Y2xhaXI6CiAgZGF0YWJhc2U6CiAgICB0eXBlOiBwZ3NxbAogICAgb3B0aW9uczoKICAgICAgc291cmNlOiAicG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBSRUxFQVNFLU5BTUUtaGFyYm9yLWRhdGFiYXNlOjU0MzIvcG9zdGdyZXM/c3NsbW9kZT1kaXNhYmxlIgogICAgICAjIE51bWJlciBvZiBlbGVtZW50cyBrZXB0IGluIHRoZSBjYWNoZQogICAgICAjIFZhbHVlcyB1bmxpa2VseSB0byBjaGFuZ2UgKGUuZy4gbmFtZXNwYWNlcykgYXJlIGNhY2hlZCBpbiBvcmRlciB0byBzYXZlIHByZXZlbnQgbmVlZGxlc3Mgcm91bmR0cmlwcyB0byB0aGUgZGF0YWJhc2UuCiAgICAgIGNhY2hlc2l6ZTogMTYzODQKICBhcGk6CiAgICAjIEFQSSBzZXJ2ZXIgcG9ydAogICAgcG9ydDogNjA2MAogICAgaGVhbHRocG9ydDogNjA2MQogICAgIyBEZWFkbGluZSBiZWZvcmUgYW4gQVBJIHJlcXVlc3Qgd2lsbCByZXNwb25kIHdpdGggYSA1MDMKICAgIHRpbWVvdXQ6IDMwMHMKICB1cGRhdGVyOgogICAgaW50ZXJ2YWw6IDEyaAo=
  redis: cmVkaXM6Ly9SRUxFQVNFLU5BTUUtaGFyYm9yLXJlZGlzOjYzNzkvNA==
  database: cG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBSRUxFQVNFLU5BTUUtaGFyYm9yLWRhdGFiYXNlOjU0MzIvcG9zdGdyZXM/c3NsbW9kZT1kaXNhYmxl
---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "c01NbUJLRmxOTmswbGhSRA=="
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwekNDQXJ1Z0F3SUJBZ0lKQVBZL096TE1lVnEyTUEwR0NTcUdTSWIzRFFFQkN3VUFNQUF3SGhjTk1Ua3cKTkRFNE1ESXlOek0zV2hjTk1qa3dOREUxTURJeU56TTNXakFBTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBZzhBTUlJQ0NnS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQWFOUU1FNHdIUVlEVlIwT0JCWUVGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUI4R0ExVWRJd1FZTUJhQQpGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0lCQU1Bc0V0VmxFTE13ZHRjaWZIZU9UMGtPbWY1d285SW4vZUZTZ3NjQ3pCTURhUngyQjNxMzZBb1MKSWw3WFdBWnBldmFSN1c3eWVBUkthQXNoQkxoeWdVcUxEMHpXYktsU045SHByZDF3ZHBNMGZmeVBwTjVkeE9ZQQplcjA0eTEyR1JuQ2JNWXFpNGN2enRQNFRpblhxcTJ5SFNZaExiTzlxa0k1Z2JXVnhrUnVJY01Ldml4ZGRsbE5ZClEzb2JKYURESG1vdk0zK2cvRysxWUZndDRxRVMzOFhuSjdCclNzaEhubjVFSVFoMjg2eGZKcml5cksyaEhiTEoKcXowWXVGNkczRFhQZVdHZ1h2ajBIaXBjMGY4VURaa0tray9lR0VJNnZFa3l0eXZvZXBvWkkyWGJBZi9aTXk1bgpLd3VoRW40aGhrRk13V2FTV3AvaDBRZE1DYXhrNEJWU09xbU5WYUxTQjcrRmpzSWo0Q2FzRm90WWl5SjJncFJCCk5mOFFhUzRiejBUbjFlQmJDOGtzaitlM1pXZVgyYjV3Vk1qcWw5alR0MlgxSUNzOEtLZTN2RUJranFUMkFVaTIKNTJUdEt6bTczYVdyei9HUHkvUTJMQ29yM0ZoOUZHVlNCT0JCRFhHeTZNSnBOSEpuWVZIOUVFTkZHT2g4NW9sMQoycEFET0JCNXZBVS9rTEI1TEhQajJrdWUvRk1pSGFObnJTWUlHck1sQlNYMmpqOUVZYTF1dVVIK3BkNE1CajFGCjV1SDhPUmlhUTZodDIrV0hrbHhpYzFSajV5VFlRd1ZsSDcwQ0JPbitxVkVkbzYzeVF3ekFNSktGSXdsR1VRRVgKamlsamdjODZxNGNadFVURnJjd01pZGJrKzhRNitKYkRWZzdIVi8rcG5DK3dudjE5N2t3ZQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQVFLQ0FnRUFrOHE4czRQcnZZYnk3OVVWbFdKTktxY2V5a3dCa3hFMWZqcllPUldRMmhpQWlyeEdWNSs4bERULwprNnVqbTFFV3diNUswSHh4UktrYitQRWExSHFOTkhFNkp4TnBKS0s5ZXhEbFlBUSt4N2RGQnFWci8ybmF6bW80Ck1COE1MWWxtSXp0V1dvU1l3ZThvMm1FZzRxK2J4WXM1SW1kdTdBa2hFN2RKNjNobTIzZ0xNZmVNTGFsUnFvcHUKWEJQd0U1blhQNmFHdVVOSHRHMUs4dFFKRGxaWStMRWJBZU9mUmVOUWhUOU5kUnVrWVNXNTc5dmZLYmxKclN2egp1bGc4OXNWbTNjV0VLNXBCNnJqOXdKYks5NHZvS2Z0VnFiYnVCd1dqZDFhOXBpYktod1ZCZTJMMkZXaHBTWmM1CkYvY29DN25qVGFZVDZ0cjkxeTVWaGhKaElaUUNmL3Z2NFpsNVhoRkhzNVZUWk5iTS9PZnF5RlFMWVhWSk80OEsKRjd0bWF6QUVRUUJRd1ZacUg5QzlOUWR6UEhXbWMzOE9raHRjMXd6YXFuL3JnOSsxc2dBTUQ4aFdDdFFKVWU5NwpiOXltaDVBMFo0UVhLcHlGVDBiK3BYY0QxalJoYTA3VXRrWCsvekxKOUhwQVhjVW16a0crajVDWE5wbnhzSXE1CmZKRmVxM2hCajl3Nm40aCs1ME00VzBGc2U1WW9FVXNjM0IwZno4QmxRQmIrWUpMRkxOSDM0TUg4cDFsMFpEWUoKeWFlMHBzeGxCaWpnNE9QWitXQ0JhK2p0Rlc0TGlXZ0VjeHdnejh3K2hFT0FRcjJhMURjN3c4amQrWTRJSzhVbQpsVFZzNWRicDRtT21QTWxSdi9HTTdrRHVkRnFiTWczWUZ3WGczUWJxdVZxTFp6RXpqVmtDZ2dFQkFQSktaYkNXCllmTGVqa1MvZmtSeVYzVkliNTRtS3dRSG9NV3ViODh0UGdHdVh6anNKeWQ1UVRRNThQcFVqWHJMSG1uOGxTMisKdmlFOEdKeWxLd04xeU1sWnc0MCtrWmhwSFVwQ1d4LzJaS2pBcXZxQTlPT0tvMmZ2NkhkL3dPQW5VNEN0aW9DMQpwcmk3bEtGWVhvUDhEdFFWd0hZdkl6Q1JxRG5oYzRtd0pEcXpUQzl4ZHVJK3N2eHpsNHhIODJmeDBqclBpRlkrCi93T2RYanlmSVBqeWhIQzRqUFRXYmFpcndYUzlkQmpTbDEyOGFJUlQ1ODAveVhFL1NZQXVnZzA1akt0ZzV6UUEKU28xM01UZXpYUkhYZE8wZGkzdEVNSEdSRUVrRnBlVm5uUFF2Q0NlZEswRFYzNmlOd2lXYzhwd2RmTE1WbmVUdApES3daZWRDeCtvLzdldjBDZ2dFQkFPdTQ4REdFSkpKekh4VlI1bVkxSzJBbFp5WXRwVE9XZWhLMXpYNzRKdk0zCll4TjRuZCtaeDVuOXVTUG1tS3pxRjNUVSs0NFJWdGRKSzZlam9GRThkTURUTldhU0xXL1pEbU4xblQwbmp2T24KSVdKbjU5eW5PQ2hXV0taZ1haLzlVcUdSN1B0Nk94U2trZXg5Yy9mWUJzTVgveHVzZFhRaWdlb2dsMGlPWVZGVwpnWElpaUxSTEhwSEpzSy91TnhJaXpqMGhUWVluN3VEN1BSRU53RlJjQ1lmOEoxZVVGYmQ2RHVDVldlUUNLV2dmCk5kMnRTV29pMFZ5bGo0dVVYOEl3MHRqTE5NRDVDUkVKRWs0R1N2NEVEU212VWR2MUxpQktKQ0wybEVjZ29QZUMKb09EMmlDYzVLcWdubVFyYVJpbEZGazhSVlhBOVBXWkdZM0MwYjZUVm1tY0NnZ0VBTlpPMkFPS0FMbENBYlR0YgpGSStrUDA4UlA0dDVINThBTWpac2l3ZWFHbzBRaVduUERxK0ZkNk1JWXBLbjVtdGNBbHZVTVJWb3ZiaW9TSnROCmM2cHNCL3BOZjhKQ044Mm1xSEViN1dseXdNNDZBTUxiWkNXWUZMZThWQkJ2K2lFNEdkQkdQRWZ1NGhLNHZ5VG4KWVpBdlJ6NjRIR280QWRsenRiamc3NlYvbld0Z2dXMDV1TFhjcG01NUtKQVFodisyV1VMakJ3OVBIT0dEb1N3ZgpBbTIrVTU2N3JMaHQ3MHByc1FEajEwbGFKMlF1U0hTMVlYR2xmZUZjdzNlRlVwOVROK0pwdmRvQ29sMmxDSWdsCklIamdaajZPUldmQ3Zwb3hXN1JnQnVadWtxQ0QwUjYwSGRZdGF2eE4zanRpZXBzYXBBODNweE8wSmFwTWdaV1oKcnBVUmtRS0NBUUJPY0V2OUxpdTlUL0dYOXBqa2llelZJWjBoWnk4QjY2RFRlUXZZcEZyUnRDeVQzaDhxdU5GaQp2THRPNXYwSERSNmhFZjVqV0FHOXdldDA3VTM3dWxKZmwraTlLUWRWb0xUWkE5bys3MXJ5V1RzU3MrREQzQ0VqCnl4ZlV4VnhpVUxtZWFpQ2h6aHE2MDhoN0dZUHRoVVU2eGxGdHRBV2hqNW9MZnF6WXlBZzZPTDc2YStOeG0wMmcKMWF5bDNtOFU2ZUFYRjIza3BvVW0rSE5wcVZuR3VKbXpWb1VBNzVZS1orTnJlRWRoU0JiZlB3TjlzSnd0WlVpbAp1N0g0a0hjTTk1SXg4ZXlzQ2pLcUtJcWV6QmxJVGJEVG5qTnZMamNiSjVDKzBhNmx2SVhUMXZRUjUvZUdsYzlNCkJXRTM2MHBOa1YvTEQ4bU9mOUplcGkyUTQzb0RMOUVoQW9JQkFRRFRXSW1meTBLOWdHekEyclB5MTY5bVdZUUsKT2xjbkQzK2hRcTZ4NTFabjFlL3RleEZlVmxoSG40cnJuUmRDRk9BcDQ3dUZrSjJtNzJHQ1ZENzRFd1F1Y0s5eQpBRDVqb3JxZ1ZIcUNLWmRrSGpiMlY2ME16bTZnM3J0TDlXSlhGVkx2TkJiL1FHQjJ2Z0hWT08wenFpcUdaajRlCkV4N2wybS8vNVNFNERMdG43MEo5Q2dHMUh0WENTOGRXckdQTDFwekRuazhWWHRub1h6YjBMQ2hMVUZFZ1pSbWgKY1Y2QUZIRUsySDh3Qkh2aU55ZWhzUlFpRGtsMkFpV09jSk52a3pXNjhjazJuSmpSV3lQWUsxSkwzTkNLcEIzUQpPb2hyUDBmSGNXQVhNVzk3d0ZYWmhSZm5RZkR4eElPbGozTWNZVDBBbGFuWGQwRjROR2MyTnZtcGh4MDQKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CLAIR_DB_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/ingress/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-ingress"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURNRENDQWhpZ0F3SUJBZ0lSQU1XUUF5YjhqenZrVGNaK01RMDgwTDB3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl3TURZd05UQXhNVEExT0ZvWERUSXhNRFl3TlRBeApNVEExT0Zvd0hURWJNQmtHQTFVRUF4TVNZMjl5WlM1b1lYSmliM0l1Wkc5dFlXbHVNSUlCSWpBTkJna3Foa2lHCjl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUE0UXNYTklYMllEa25FemRKZnU1N1A0cFZVUWxxanZuOFdCVlIKdzYvdEk5VnZ5NXlSZ1d3VHk1a2I1S0hxZkJaV3RMblM5dFBFb2FWblRPeHg2aGRtS2JVZHFXZXJRd2VqbTNqMgpieG9RdnFxeWk3ODVYM21UMm5VR3B3ZFVYTUJoS3RTNTRNcERPM0VndkpYM2FVL2x6K1VMcklvRFdvNzNPb0trCmozTkVNTlRrampxczlPUzFVRnU3K01tcWd4bVcxTjlGOEJMc1RnVm0wYmwvUGZ2bitzdXFqOU8zdDhqaGlLRUEKaHZtc1NYT2hFNVkvWDJRV2dxUkdBMUZaYkNDSWo3QlVrcmNaT2JudXg4ZFVOWm96elp6L3lBVVJoaW5ZbXhBRgpXN0RnY0ZGdFJkMzBncityWHZiQ0pEWm5NYVJ6RXFsVG5ZbEFvWHQ4VG50NEZqd3JvUUlEQVFBQm8zUXdjakFPCkJnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0cKQTFVZEV3RUIvd1FDTUFBd013WURWUjBSQkN3d0tvSVNZMjl5WlM1b1lYSmliM0l1Wkc5dFlXbHVnaFJ1YjNSaApjbmt1YUdGeVltOXlMbVJ2YldGcGJqQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFmWjEwSG9ZRGk0bGhZQnRyCmJKNWo4M0tlYjNtL0g4SkhEMGt5RmpoalQwYzVJZ0xVVXY1eVdWQSswZFlFQUx0cmhiS29yclRzeTQvZDFPMU8KZVBQM3ZSMS9BSnk4YUlnUDlYY2x4QWNYa3pqSWRzYXNuRVBLRGRBL2EvUFMxMzJXbUFQbnE1TWU3TEtjbkovUAozMExURGFtNXhBbWU5eUF0T2Rwajk4Tkp1M2J5NWRXUGRqbTllRGJ0bGhQNlZrTDZad2RmSWg5ajE1V2hDZm5GCnhMTmxWM05oZllGbUpXU29Jclkzd2h6MGhPRW1vbGJOT2k5SU9odEtEdlF6aklLL3I5OGVxbEFuVnc5WDF0TVgKY1RITkpoQ0w0Z2Iwc1hxczNWak1qa2FQMG13VEZFRVRHUU5DaG9jZFZ3UnZGRmtWK2lxdmYrb1R1SnV3QUkrNQpIM04xL2c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNFFzWE5JWDJZRGtuRXpkSmZ1NTdQNHBWVVFscWp2bjhXQlZSdzYvdEk5VnZ5NXlSCmdXd1R5NWtiNUtIcWZCWld0TG5TOXRQRW9hVm5UT3h4NmhkbUtiVWRxV2VyUXdlam0zajJieG9RdnFxeWk3ODUKWDNtVDJuVUdwd2RVWE1CaEt0UzU0TXBETzNFZ3ZKWDNhVS9seitVTHJJb0RXbzczT29La2ozTkVNTlRrampxcwo5T1MxVUZ1NytNbXFneG1XMU45RjhCTHNUZ1ZtMGJsL1Bmdm4rc3VxajlPM3Q4amhpS0VBaHZtc1NYT2hFNVkvClgyUVdncVJHQTFGWmJDQ0lqN0JVa3JjWk9ibnV4OGRVTlpvenpaei95QVVSaGluWW14QUZXN0RnY0ZGdFJkMzAKZ3Irclh2YkNKRFpuTWFSekVxbFRuWWxBb1h0OFRudDRGandyb1FJREFRQUJBb0lCQVFEQU1EbU1HSS8xVXpuawp0a1dsQ2tQbFd0MUx6Sy9kRk84RnhvZENpSjhNQ0Q1bWMvcnJ2WUlXVVZhNTVmR2NNWE93K2pXSnFBYjRTWXF6CjdnWEc5bDdBWmJYRU5BM1Z1OU5rZG1SM001cHpTdElhZUorbHd1MmJGbkFzK3h4MzdhL041VWd0Q205cWQwMk8KNE1BZmh5VnJhMStSNVhmQndmQ3ZYbHp0U1hKR0JCL2d3QVVQV1pCbGZkaFFUazRWVWxZL2YwRGgzRHgrQzEreApaSW9MWG0vcHFiYkl5SVhxN25XblBVcjFLa0JGL1gvcGtHSnpubStrcGFaUG9heU0zUFJOaHVXRE5odnh5YTlvCmVQR3U5VzliV0NXN0tVbWdmeGc0dnBTTTI2eGpHZkl2b0c5QlM4Q0tlbnNVdXdkSWtuL1VTSU5vdTc0YlVzeUUKa3REcXREeXhBb0dCQVAzK2F6Ni9xRjRwclF6c3FkRFJBOTJUNklMR29DV0xCNWYwN3BhM2JoNkFTa0FJOUZJaAo0Wk1iczUwNjh4WUQ4TTliekZrRytySTN6Z3FkSzNNNkJwRnJSeEQ1VHMzMVJWWnhOYnI1cW8vUWUwMjNhQy9XCk56WFFnSG84bVdOdWh3RHlTSGNmVGdiYWFuV1YrZ0F1WDVld3BwN3RQOENNUndOQ2QxTkVpUjFsQW9HQkFPTFMKSWhlTVNmNnZsWis2ZlhmcVRBSm11NzlVRXBJWWg1bU4xTTNxS3Y0bHNUbkdlZ3MyRHgyTXJoTC92cTJCa3A0OAoybHlFcC9lSVJkK2FXSjFNVEh2cHQ1dFBIQlluc1FaODBJa2FLbjh5WmMwdXQvSlo2Ykh5RFo1bUVKdWlvTURJCk5UeGt5ZU9KWjg0d21PcE9PVFNMUjZReG5FN2JpWExYeXpOSjdOK05Bb0dBSkkvdExEazJxV2RpYTh2ZG5odVkKYk5zUHkxT0FWaWN2VHFhSmVkU3AyMllvU2hOLzZCck1kL3F5M2wxUUJNbElidkVOOTNyVHQ3Zmt4dzVjNU5kagpmcWRzc1hyUjV6LzVYVG9xdStHWXRkOFRBTnIzK25yaHM3Tng2eWF5QmVneE11ZXRtc2c4MlN1enkzMXRZWDFMCmNYQ1NhNnBIVlJaY1dwSEV6NDI4RnlrQ2dZRUEyTjdlSmZISEZqTkFOcmNUSEVMelppQmdSekhWaDhiWWNHT0MKSTFoUXZ5dSs1bVQxY0I3Q0dSalhuK2JUcEFZTjhDcHpCcDc0RXQ5REgrYnQ3NGh5WU5BNDg5Q1NKRVRUS0ViVApCU1AxbWlUUDNYMWI5K2NzWVMzMUE0ekhPR2dvbCt0VnEyY2ErZW41VE5aK2Z4bEg3UXQyOW5GUTZMMVVFSEJ3Ckk1djlWa2tDZ1lFQTB3b0tYOU5YRXF3N0h1czdwTEJrNjhIQlFzNnU2M1pJZml6WVcvcFFNRGd6emwrQnAyL0EKNDdPVGtQVE5ndll6MkdIckZqOVVnQ0lDMUsyeXB0MEpCc0MybVRBa1RxTmdtU3FiSTZVZFdXcDBtRjY4eXRaOApzTEhxNE5jRjRPZENGa2k4Y09BbWswdnk5V056R2hmRmFDUG9MOWh5VEtSeVY1UVI3bnl1cThFPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM5RENDQWR5Z0F3SUJBZ0lRSW9mM1hqVUFzQ1dRdW53anI0Wlh3ekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NakF3TmpBMU1ERXhNRFU0V2hjTk1qRXdOakExTURFeApNRFU0V2pBVU1SSXdFQVlEVlFRREV3bG9ZWEppYjNJdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRGNNR1lqcGV1N2c0UFg4WWh4YmFRbUVMTE51Q1RseXVPNW05Z2V0KzlTMHVMQVpaWU8KYkpSSFhGR0xBc2NWYkwzMW92cHdxalN2aVhRci9ab1ZLK0M1UGpGR3ZyamFKZXgyMndXWjFIL2haVUd6YnVoego1M3F3UkJpRVR1dnM2eUkyeUVsN2JzS25qRGt6OFRNK2hEL3Vxalpac3FFR2N6eHlic3FCdStOQzY0S3hZYitzCmliSXhYZ1ZaaDN3eVlXOGpGWWc4bkFWU3pQaWNvM1VHTWIxSlZHelJGMVVadFpaem56SEJmcVlDYlAxNmZGSGgKRFp6V2RFUlc0VDVrd1NnTzBqR2gwb3BrcG5jbHZkcTgwM2ZXNlM3N1h3OCtrRjE5MXU2bTgrSWxKMzdFcitwUwpCMFVvTFVmZzVyaHdXV3RvK0d5cUEwZ3Y4YVo2QWh4N2dDdGpBZ01CQUFHalFqQkFNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFuRjJOS3dCQXJKWmFlR1dlYmY4d245Vm1CR0UxME5PZApic2o2dWZ6aS9haUNPdHRydCtVMVZyUlRYd0d2eWo4RGRUdU1nYlArb1RqQVE5WHRYTjJYZmVvVDN1dTNsclVXCjZHc1hEUVVLbytSZGlPTW9KWnhxbnJZUzc2bGVQNGlPdmxoNUZFVmlJS3A3QUpmMTFkNTVQcUZuaVREN2xXNVkKYmt3V2xTSUI1a2FTdVlLZlJpbzlRRzkrcEhlbE1UaXpKU1lQcEEzSldUeTluLzdJMURRYmJGYmNLZWMyLzV6NQpUVmNiVkwzeUVoT0lPT0E5RVZkWDBvY0dCQllzbGkyUHluNnNtM0hIaml4RG1ua2hjbUg3c081MXdXb0ZqeXd1CnFzc3NZTDdjdE1uQXB5WlFkYmdZZDc3TWdTK2htS29ZOE04M1hWcVBxaE5lVFJKQ0xIdUNrZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  JOBSERVICE_SECRET: "UW1DcWtuMGRLZnlaU0p5eQ=="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: harbor/templates/notary/notary-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-notary-server
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: notary
type: Opaque
data:
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURBekNDQWV1Z0F3SUJBZ0lSQUpVaUdhdFY4QVlwSnpkbjNaZ2krTEV3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRBZUZ3MHlNREEyTURVd01URXdOVGRhRncweQpNVEEyTURVd01URXdOVGRhTUJzeEdUQVhCZ05WQkFNVEVHaGhjbUp2Y2kxdWIzUmhjbmt0WTJFd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDd0NqbGRmNzJJTG5pTk9ZcjdSL1RrUmYyRXh5K2gKQmFkcWtITGVwdk5qMGlmMFY4VzRJYURPbWVjSVF3K3VZZ2lGVkRpczZyNjh4bzJtQ3ZkWDZzM3BrRkh2ZVoxcgovT3ZRN28wUE4yUS9vZmx0YkFQSkxObTNkSUpuQU1tQmcwVVFpRnc1c0I5WjN1MG40enoyeExuYWIybEtmQ0FQCm1pVnJPdVVpN3hqVkNLSkhGRjNXMVdDQ0lWTUhkUm1meGlBc1E0c20rak1rT09LUWFCLy9Ha1BhbzBJTmU4T3kKQitjN3prZE9FWlVrb2FLR3NGNXFtRGdiUUxUZ2xIMmF6RWNYdzliWkpldlo2M2VFazNsWGxXRDdMWTQwZ1V6RAphcXRkbUd6RDZMK2lYUDhqRXpnVDVGU0NJbVNjbld1Yy9ONUpmc2h2bDVta0lFYVNaZXk2SzdOUkFnTUJBQUdqClFqQkFNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQVlyd0tVV2I2c0NxTworcCs4Y2p4bVAwdzBoWlFhbkNxRy9YR2xrRk1wWlJYUzg3SUkzbXVwRklDUkNCa3lXTVRZWnRPMWFRZHZCSEd1Cm1TU1VNWlhqUzdRd0hMcW1hMVp4dG1FdTgvZy9sQmN1dVBrODU4OXRZQU9zaDY2cTZsQjArWnFoMWJSTHRzb3IKa3cwZFlJYVVlL3dJQ2RqM1NQaGtwSVBsaHRDWGJTT0FiR2VFSDZTUUJMU2hXUzZZN1B1ZXc0dXYxZ0FsdHpUVgpLOEVadkVPSWlDb3U0SkEzOTJMV0w1ZHlHM0lja3lCNDdld1VyUDFJNnpFN3JWSmhIbFNWNjhVM0hnamcwN1Q0CjlNOVBJY1IrbUMwNjlwZTZwajVLQ05pbWtWTW14Rzc3VEQrMzI1Y3lUNTJIVTV5MjZLUUZiODR2NDJlVUJEbmYKWTZvRTd6bXY4Zz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFVENDQWZtZ0F3SUJBZ0lSQU4rT0xlQndOSnExLzJDTVd1MDhQTUV3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRBZUZ3MHlNREEyTURVd01URXdOVGhhRncweQpNVEEyTURVd01URXdOVGhhTUN3eEtqQW9CZ05WQkFNVElWSkZURVZCVTBVdFRrRk5SUzFvWVhKaWIzSXRibTkwCllYSjVMWE5wWjI1bGNqQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU80MHN4NWIKRTFWR3pwOE5iUVJ6VmRHTS9sTGZDUklFejgxaXF6Q0Zhc2pFNXpFRk1Bc0d4a1A4ZTZuaUw4R0l6RTNES0krUwordnM3NEhpQTJBaHRXeWRkRFhzVmdwR3V2UUh4eUVpLzdHdURLemZNVXM5Z1FpVWNhdFhKVnB3aUIyN0Fwd0FrCkZhak9ZY3k0T3FGblhINkUySG11U01id0UrcVBTV3pDMDIrS3BtZVhzWXhkdHNlU2laSnpQSW5pWm9LcVhxeGkKZ3JVRllVRjB6cUViTy9aSjN4NTQ5M1hUOEFEeTFFL3RjRHovbHhvN093djFaOGN6amtTUk1BWFd2VDNXaWhpWQpjZlJwSnpURnhXMmtmMWVBVm12Nnd5NjM5RWNSTklDMlVsalhwdzFoV00zcEZkU2RpM1NVYUxLc0Jsd1BrNnFGCnV6R3RMaml4VmZpYWRyc0NBd0VBQWFNL01EMHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUcKQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQQpBNElCQVFDdFBybW5scFNxczY4L3ZUSlNRcTZNUTBQWFBiSmJ1ZjlsV1dHNjVaUDlRTmJudkZjWjNEdC9lNTdaCmprVjF3dm1YOEtZRTZDSXREVFViNzR1S1VJcitER3RYeWZjR1FXT1kyZGw0bXpPV0VTQjZrRVpzeXpRV0dUMU4KUVJGaklxSmlqUGdoL3NOeVBtZk1LM2s1Sk90em5SRzU5RysrVXQ1ZTdObWRYZGxhMGRFRGxGSWdJZ1ZrV3FCZAo1S2ZrVmZFYnpJRWhKcFYyRXBmWTVKeE1TQWxoNzdWTE5zak5OS1FQLzNSdUY2bVkwRVlqU09yaUZqcmJKQ2tECnc1ZWZFQjErTlhGS0pJc1RlZFpYRXdXMHlWaTNvbjBkaVpJVXd2VVRRT2duSUpOTEhicS8xZlJDcHhhMEJYZWoKOGQvYk4xZlIrbWxvZ2w4Y0w1THpNUmtBY2FqWgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBN2pTekhsc1RWVWJPbncxdEJITlYwWXorVXQ4SkVnVFB6V0tyTUlWcXlNVG5NUVV3CkN3YkdRL3g3cWVJdndZak1UY01vajVMNit6dmdlSURZQ0cxYkoxME5leFdDa2E2OUFmSElTTC9zYTRNck44eFMKejJCQ0pSeHExY2xXbkNJSGJzQ25BQ1FWcU01aHpMZzZvV2RjZm9UWWVhNUl4dkFUNm85SmJNTFRiNHFtWjVleApqRjIyeDVLSmtuTThpZUptZ3FwZXJHS0N0UVZoUVhUT29Sczc5a25mSG5qM2RkUHdBUExVVCsxd1BQK1hHanM3CkMvVm54ek9PUkpFd0JkYTlQZGFLR0poeDlHa25OTVhGYmFSL1Y0QldhL3JETHJmMFJ4RTBnTFpTV05lbkRXRlkKemVrVjFKMkxkSlJvc3F3R1hBK1Rxb1c3TWEwdU9MRlYrSnAydXdJREFRQUJBb0lCQUdjNWp5Vm9ja2hTRnRmMgpDWGdVUXV3OEhUbnNUUkh4NDlzdEZ1SS83clp5SFgyd3NkRVZibldueEM4cVJXZW8wR0FpWWtGVmdFMis5TmRECmZscW9pUWZWMnpHcmNKbVJEM2I0UDhMRzZMenVhcHdUZnc4K3QyczlsVTV2b1lpbmRuRVlLMFowWEs1NlFRZG0KRG9KRE9HSGJUN1ByUXI1eTZ5NktTVmRJVmpmUEY1L3ZYK2dQR3YxOFlxZitHVEV4Y3F0MW5qRUhDUjdyelBjTQp3NUM4ZWR6cVYwUkpmeTZ2aGcrRGMvYzZWNlczK2c1U2tOZTJ0cjBPTjFrWWwxS2ZvTWsrb284czNwQVpjRVg2CmdpLzB4azhNWXhSYTFUaGZVci9YZUNrQjlHZHdneHhXa21tM2hrOGRudDJKbUNtSDdZckYyKzB3NEo0OU4rekQKVURPWU5BRUNnWUVBOHdGcVRtcnNzSnpkWW52RmZudUJNMVQ0SlQ5RU92cFRtcXZ6RUhJYXluOWx0ZDdYZVc0Sgp1Z0pob1lQcEN2Zksvd1IwRU9ZTVIxN08wQUlkSFRSMEdnTUtGQ2J5UGFyWER3S05OUkIyNGpyTmlCYXNZRzBtCm9XNWswRS9DbDFiYmIrYUU0b1I0dUMvanl2elNmSFF2K1QwLy9VaEl0Vnl6UEcwNTZYTWdXZUVDZ1lFQSt2R1UKZ29FM1RuUlhIZEdXZ3U0ZkhDRmN3WVBiMkZWblpId3QveHVINjJUNEs3WjNNL2dVdTQ1R0szMUpEcGNnKzBGZApUNDNVT2xXWmZXKzluK25YU1FKRWZua1UvVjFtMHRRN3Fjd3JQK2gyN3V2bGNwZU9vSmRrTk9HSmRiSGxWUzNYClIvem84QjNXNTA3ZGtBNVAvNjdjZ2VCUjlJaHBoUFY2bjgyb2ZCc0NnWUVBaXFTQkVYS0J6aFlCWFNIK3dMWVkKTmNCQnY0YUVHQjRnT3Z2bHRybFRQYnRIdldjQml0OVVIMU1pZnJNeTc3WUdsRTduSllrSzhtRk9IM0ZGU1JkWApNa3dQb1FYRGFabWlENGRHSjBOWWdLUktCVjNpUlRXaE43TXpRNEp1SkVoQzlHb1I0T2J4dFN4bGk3ZUpJOFpxClpJb2tpdzZGcFN2WmV4MWFVQzRHQkNFQ2dZRUFvbTUvRjU1Mll6VVJNcjc0Y3RXWms0YlEySDMyYnVpUkhVejQKSlBuNEY5bHFmamtFbmNJR0FZVk5URmN6VTl0bFFOMkZmYm9yVm5zVCtFcTg3bWJac0d0a1ZJMGhsZ0xBVE5XTgpyUkg0S016Yk56bkFjbFZCd0JkZWlKQTRmdE5ndzZzQmY1cG9XUXluajEvUU1LL2kvbmg4U1NFZlMyNkZCc2d5CjBIKzVnR01DZ1lCRTBsbWtHMm4wS2dYMUEyeGg2NzdHelFTaWVIYjV2NGZzQ2RNZmpJd2k5TExXOFE5Z3RiVjMKNGpuTURyblRJeXdkT1pYSC90bkpGMEEveHNNMWJhVFpodUlQK2JZREVoeWZrQTNOcUptRnpaRldQRGpTZW9RTwpEdlgwVURmd3lhemtxREgySmx1dWR4RnpTcjNJeFpXM0k4TGhrNmRiUE53N3AzS2lxN0ZvZ2c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  server.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiaHR0cF9hZGRyIjogIjo0NDQzIgogIH0sCiAgInRydXN0X3NlcnZpY2UiOiB7CiAgICAidHlwZSI6ICJyZW1vdGUiLAogICAgImhvc3RuYW1lIjogIlJFTEVBU0UtTkFNRS1oYXJib3Itbm90YXJ5LXNpZ25lciIsCiAgICAicG9ydCI6ICI3ODk5IiwKICAgICJ0bHNfY2FfZmlsZSI6ICIvZXRjL3NzbC9ub3RhcnkvY2EuY3J0IiwKICAgICJrZXlfYWxnb3JpdGhtIjogImVjZHNhIgogIH0sCiAgImxvZ2dpbmciOiB7CiAgICAibGV2ZWwiOiAiaW5mbyIKICB9LAogICJzdG9yYWdlIjogewogICAgImJhY2tlbmQiOiAicG9zdGdyZXMiLAogICAgImRiX3VybCI6ICJwb3N0Z3JlczovL3Bvc3RncmVzOmNoYW5nZWl0QFJFTEVBU0UtTkFNRS1oYXJib3ItZGF0YWJhc2U6NTQzMi9ub3RhcnlzZXJ2ZXI/c3NsbW9kZT1kaXNhYmxlIgogIH0sCiAgImF1dGgiOiB7CiAgICAidHlwZSI6ICJ0b2tlbiIsCiAgICAib3B0aW9ucyI6IHsKICAgICAgInJlYWxtIjogImh0dHBzOi8vY29yZS5oYXJib3IuZG9tYWluL3NlcnZpY2UvdG9rZW4iLAogICAgICAic2VydmljZSI6ICJoYXJib3Itbm90YXJ5IiwKICAgICAgImlzc3VlciI6ICJoYXJib3ItdG9rZW4taXNzdWVyIiwKICAgICAgInJvb3RjZXJ0YnVuZGxlIjogIi9yb290LmNydCIKICAgIH0KICB9Cn0=
  signer.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiZ3JwY19hZGRyIjogIjo3ODk5IiwKICAgICJ0bHNfY2VydF9maWxlIjogIi9ldGMvc3NsL25vdGFyeS90bHMuY3J0IiwKICAgICJ0bHNfa2V5X2ZpbGUiOiAiL2V0Yy9zc2wvbm90YXJ5L3Rscy5rZXkiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6Y2hhbmdlaXRAUkVMRUFTRS1OQU1FLWhhcmJvci1kYXRhYmFzZTo1NDMyL25vdGFyeXNpZ25lcj9zc2xtb2RlPWRpc2FibGUiLAogICAgImRlZmF1bHRfYWxpYXMiOiAiZGVmYXVsdGFsaWFzIgogIH0KfQ==
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJ5JDEwJDlMNFRjMERKYkZGTUI2UmRTQ3Vuck9wVEhkd2hpZDRrdEJKbUxEMDBiWWdxa2tHT3ZsbDNt"
  REGISTRY_HTTP_SECRET: "Tk1uQ2Y4cHlDSkRiMUdtSA=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/trivy/trivy-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-trivy
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
type: Opaque
data:
  redisURL: cmVkaXM6Ly9SRUxFQVNFLU5BTUUtaGFyYm9yLXJlZGlzOjYzNzkvNQ==
  gitHubToken: ""
---
# Source: harbor/templates/chartmuseum/chartmuseum-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  PORT: "9999"
  CACHE: "redis"
  CACHE_REDIS_ADDR: "harbor-redis:6379"
  CACHE_REDIS_DB: "3"
  BASIC_AUTH_USER: "chart_controller"
  DEPTH: "1"
  DEBUG: "false"
  LOG_JSON: "true"
  DISABLE_METRICS: "false"
  DISABLE_API: "false"
  DISABLE_STATEFILES: "false"
  ALLOW_OVERWRITE: "true"
  AUTH_ANONYMOUS_GET: "false"
  CONTEXT_PATH: ""
  INDEX_LIMIT: "0"
  MAX_STORAGE_OBJECTS: "0"
  MAX_UPLOAD_SIZE: "20971520"
  CHART_POST_FORM_FIELD_NAME: "chart"
  PROV_POST_FORM_FIELD_NAME: "prov"
  STORAGE: "local"
  STORAGE_LOCAL_ROOTDIR: "/chart_storage"
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = dev
    enablegzip = true

    [dev]
    httpport = 8080
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "50"
  POSTGRESQL_MAX_OPEN_CONNS: "100"
  EXT_ENDPOINT: "https://harbor.t.khs1994.com:28443"
  CORE_URL: "http://harbor-core:80"
  JOBSERVICE_URL: "http://harbor-jobservice"
  REGISTRY_URL: "http://harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://harbor-core:80/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://harbor-notary-server:4443"
  CFG_EXPIRATION: "5"
  ADMIRAL_URL: "NA"
  WITH_CLAIR: "true"
  CLAIR_DB_HOST: "harbor-database"
  CLAIR_DB_PORT: "5432"
  CLAIR_DB_USERNAME: "postgres"
  CLAIR_DB: "postgres"
  CLAIR_DB_SSLMODE: "disable"
  CLAIR_URL: "http://harbor-clair:6060"
  CLAIR_ADAPTER_URL: "http://harbor-clair:8080"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  WITH_CHARTMUSEUM: "true"
  CHART_REPOSITORY_URL: "http://harbor-chartmuseum"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  SYNC_REGISTRY: "false"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL: "harbor-redis:6379,100,"
  _REDIS_URL_REG: "redis://harbor-redis:6379/2"
  PORTAL_URL: "http://harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  CSRF_KEY: "mKh5HqvrGfprvxkPipPAO3QWBoV31YEc"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-jobservice-env"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  CORE_URL: "http://harbor-core:80"
  TOKEN_SERVICE_URL: "http://harbor-core:80/service/token"
  REGISTRY_URL: "http://harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
---
# Source: harbor/templates/portal/comfigmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: "harbor-redis:6379"
      db: 2
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
---
# Source: harbor/templates/chartmuseum/chartmuseum-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-chartmuseum
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/chartmuseum/chartmuseum-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 9999
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: chartmuseum
---
# Source: harbor/templates/clair/clair-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-clair"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: adapter
      port: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: clair
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-notary-server
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 4443
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: notary-server
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-notary-signer
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 7899
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: notary-signer
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-redis
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: registry
---
# Source: harbor/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-trivy"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: api-server
      protocol: TCP
      port: 8080
  selector:
    release: RELEASE-NAME
    app: "harbor"
    component: trivy
---
# Source: harbor/templates/chartmuseum/chartmuseum-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-chartmuseum"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: chartmuseum
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: chartmuseum
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: chartmuseum
      annotations:
        checksum/configmap: 302662f75d2487bd7ccbae0433c7d9434628cfe369d9d8531632f13aabc8a2ef
        checksum/secret: eedbdc2cec3014448f8a4a11a2e66285ed85bf31db6653175f19c39376e852af
        checksum/secret-core: 25d4f7875f35e1df875a40a38646f6a11fdd8a400f4d5de45471a1f7af4cc03f
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: chartmuseum
        image: goharbor/chartmuseum-photon:v2.0.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            scheme: HTTP
            port: 9999
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            scheme: HTTP
            port: 9999
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-chartmuseum"
        - secretRef:
            name: "harbor-chartmuseum"
        env:
          - name: BASIC_AUTH_PASS
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
        ports:
        - containerPort: 9999
        volumeMounts:
        - name: chartmuseum-data
          mountPath: /chart_storage
          subPath:
      volumes:
      - name: chartmuseum-data
        persistentVolumeClaim:
          claimName: harbor-chartmuseum
---
# Source: harbor/templates/clair/clair-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-clair
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: clair
spec:
  replicas: 1
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: clair
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: clair
      annotations:
        checksum/secret: ec13977f3d8ba8afd6f205d8b996378d43e4f9cef8ff01823c3ba862cbab9ef4
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: clair
        image: goharbor/clair-photon:v2.0.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        args: ["-log-level", "info"]
        env:
        - name: HTTP_PROXY
          value: ""
        - name: HTTPS_PROXY
          value: ""
        - name: NO_PROXY
          value: "harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-clair,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,127.0.0.1,localhost,.local,.internal"
        ports:
        - containerPort: 6060
        volumeMounts:
        - name: config
          mountPath: /etc/clair/config.yaml
          subPath: config.yaml
      - name: adapter
        image: goharbor/clair-adapter-photon:v2.0.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /probe/healthy
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /probe/ready
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        env:
        - name: SCANNER_CLAIR_URL
          # To avoid a pod cannot reach itself via service IP when the clusters disable hairpin
          value: "http://127.0.0.1:6060"
        - name: SCANNER_STORE_REDIS_URL
          valueFrom:
              secretKeyRef:
                name: harbor-clair
                key: redis
        - name: SCANNER_CLAIR_DATABASE_URL
          valueFrom:
              secretKeyRef:
                name: harbor-clair
                key: database
        - name: SCANNER_LOG_LEVEL
          value: "info"
        ports:
        - containerPort: 8080
      volumes:
      - name: config
        secret:
          secretName: "harbor-clair"
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-core
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: RELEASE-NAME
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: bbfa0780501de91a503435416789b2354723f74e6ae036749c13b928b54dfc02
        checksum/secret: fb01b3d208b6fae77c684338a1f7f1bc56049dd85de8f12bf6610ebc965ba0cf
        checksum/secret-jobservice: bef509f38d3a468f8d5b64589e6cab3f6f6201f4ab3ccaaaf8cea511501df70f
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: core
        image: goharbor/harbor-core:v2.0.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "harbor-core"
        - secretRef:
            name: "harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-jobservice"
                key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: harbor-core
      - name: ca-download
        secret:
          secretName: "harbor-ingress"
      - name: psc
        emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-jobservice"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: a26cd3a79e8a98957b5641dc3f73f779c0fde10b5ece7ed43b555a254e49bcea
        checksum/configmap-env: a0b2879d8593d08773190debf2dba70d9f71e27e6bb148f30bfe0e672175adc5
        checksum/secret: 10b307ee67cab6c09ddf08526e404b76658f27f4f90339b780cc1157233e19e6
        checksum/secret-core: 58e2119ccc33d93ad74b48199925e20d79346f6d0e85a276d784ead7301d145d
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v2.0.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-core
                key: secret
        envFrom:
        - configMapRef:
            name: "harbor-jobservice-env"
        - secretRef:
            name: "harbor-jobservice"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath:
      volumes:
      - name: jobservice-config
        configMap:
          name: "harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: harbor-jobservice
---
# Source: harbor/templates/notary/notary-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-notary-server
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: notary-server
      annotations:
        checksum/secret: bd668047d6fa6497b008b1cdfb1283846617cc7d4bbe0423677139fcd140de81
        checksum/secret-core: 4f655be262cf5793f1c63598602fc47ead3fb27f0207473b533226649e72b874
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: notary-server
        image: goharbor/notary-server-photon:v2.0.0
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/server/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-database:5432/notaryserver?sslmode=disable
        volumeMounts:
        - name: config
          mountPath: /etc/notary/server-config.postgres.json
          subPath: server.json
        - name: token-service-certificate
          mountPath: /root.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/ca.crt
          subPath: ca.crt
      volumes:
      - name: config
        secret:
          secretName: "harbor-notary-server"
      - name: token-service-certificate
        secret:
          secretName: harbor-core
      - name: signer-certificate
        secret:
          secretName: harbor-notary-server
---
# Source: harbor/templates/notary/notary-signer.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-notary-signer
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: notary-signer
      annotations:
        checksum/secret: 4a9bdfbfb7d39b573a181ad51f38000c7bde2d47bf6023e61434adeef7e77a72
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: notary-signer
        image: goharbor/notary-signer-photon:v2.0.0
        imagePullPolicy: IfNotPresent
        env:
        - name: MIGRATIONS_PATH
          value: migrations/signer/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-database:5432/notarysigner?sslmode=disable
        - name: NOTARY_SIGNER_DEFAULTALIAS
          value: defaultalias
        volumeMounts:
        - name: config
          mountPath: /etc/notary/signer-config.postgres.json
          subPath: signer.json
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.key
          subPath: tls.key
      volumes:
      - name: config
        secret:
          secretName: "harbor-notary-server"
      - name: signer-certificate
        secret:
          secretName: harbor-notary-server
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-portal"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: RELEASE-NAME
        app: "harbor"
        component: portal
      annotations:
    spec:
      containers:
      - name: portal
        image: goharbor/harbor-portal:v2.0.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: portal-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: portal-config
        configMap:
          name: "harbor-portal"
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-registry"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: bff4181b53acc93e0acaeb66d1028a6a71f3dd4a302be66b6e69d9a81c35c278
        checksum/secret: a7d0d9847f33db2f5aa1e226c8b4ad67f072e5a52c42bebcf8b2ce636163830f
        checksum/secret-jobservice: f3f1497e7b89c45a0084a6fcc2224e202df903c2abc53c5dbaca111e56ebf8c0
        checksum/secret-core: 3dca77bd0c1094168ac183767cf24db72c4d46dbd9464525efed9c38ea3ff0e8
    spec:
      securityContext:
        fsGroup: 10000
      containers:
      - name: registry
        image: goharbor/registry-photon:v2.0.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-registry"
        env:
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath:
        - name: registry-root-certificate
          mountPath: /etc/registry/root.crt
          subPath: tls.crt
        - name: registry-htpasswd
          mountPath: /etc/registry/passwd
          subPath: passwd
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:v2.0.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-registry"
        env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              name: harbor-core
              key: secret
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              name: harbor-jobservice
              key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath:
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-htpasswd
        secret:
          secretName: harbor-registry
          items:
            - key: REGISTRY_HTPASSWD
              path: passwd
      - name: registry-root-certificate
        secret:
          secretName: harbor-core
      - name: registry-config
        configMap:
          name: "harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: harbor-registry
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "harbor-database"
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "harbor-database"
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: 90e0d57ebc6da6126ee1a270482b27747d8dede1c6ae5c371fafa2157b82cb87
    spec:
      initContainers:
      - name: "change-permission-of-directory"
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "chown -R 999:999 /var/lib/postgresql/data"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath:
      - name: "remove-lost-found"
        image: goharbor/harbor-db:v2.0.0
        imagePullPolicy: IfNotPresent
        command: ["rm", "-Rf", "/var/lib/postgresql/data/lost+found"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath:
      containers:
      - name: database
        image: goharbor/harbor-db:v2.0.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
          - secretRef:
              name: "harbor-database"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath:
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
      selector:
        matchLabels:
          app: harbor
          component: database
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-redis
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: harbor-redis
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: redis
        image: goharbor/redis-photon:v2.0.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath:
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
      selector:
        matchLabels:
          app: harbor
          component: redis
---
# Source: harbor/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-trivy
  labels:
    heritage: Helm
    release: RELEASE-NAME
    chart: harbor
    app: "harbor"
    component: trivy
spec:
  replicas: 1
  serviceName: harbor-trivy
  selector:
    matchLabels:
      release: RELEASE-NAME
      app: "harbor"
      component: trivy
  template:
    metadata:
      labels:
        heritage: Helm
        release: RELEASE-NAME
        chart: harbor
        app: "harbor"
        component: trivy
      annotations:
        checksum/secret: 9525b9fcc894d4ae21b70ca1fd46c573686e8fdb3a965424935da0bf49f21115
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: trivy
          image: goharbor/trivy-adapter-photon:v2.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
          env:
            - name: "SCANNER_LOG_LEVEL"
              value: "info"
            - name: "SCANNER_TRIVY_CACHE_DIR"
              value: "/home/scanner/.cache/trivy"
            - name: "SCANNER_TRIVY_REPORTS_DIR"
              value: "/home/scanner/.cache/reports"
            - name: "SCANNER_TRIVY_DEBUG_MODE"
              value: "false"
            - name: "SCANNER_TRIVY_VULN_TYPE"
              value: "os,library"
            - name: "SCANNER_TRIVY_GITHUB_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: gitHubToken
            - name: "SCANNER_TRIVY_SEVERITY"
              value: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
            - name: "SCANNER_TRIVY_IGNORE_UNFIXED"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_INSECURE"
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: ":8080"
            - name: "SCANNER_STORE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: redisURL
            - name: "SCANNER_JOB_QUEUE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: harbor-trivy
                  key: redisURL
          ports:
            - name: api-server
              containerPort: 8080
          volumeMounts:
            - name: data
              mountPath: /home/scanner/.cache
              readOnly: false
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          heritage: Helm
          release: RELEASE-NAME
          chart: harbor
          app: "harbor"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "5Gi"
        selector:
          matchLabels:
            app: harbor
            component: trivy
