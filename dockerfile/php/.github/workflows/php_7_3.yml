on:
  push:
    branches:
    - master
    tags:
    - '*'

name: PHP_7.3

jobs:
  build:
    name: Build
    strategy:
      max-parallel: 1
      matrix:
        TYPE: [CLI, FPM, UNIT, COMPOSER, SWOOLE, PPM, SUPERVISORD]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
      with:
        fetch-depth: 2
    - run: |
        set -x
        env
        docker --version
        docker-compose --version
      name: 'manifest'
    - run: |
        set -x
        sudo rm /usr/local/bin/docker-compose
        curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
        chmod +x docker-compose
        sudo mv docker-compose /usr/local/bin
      name: 'Setup Docker Compose'
      env:
        DOCKER_COMPOSE_VERSION: 1.26.0
    - uses: docker-practice/actions-setup-docker@master
    - run: |
        set -x
        docker --version
        docker-compose --version
        docker buildx version
        docker
      name: 'install-after-manifest'
    - run: |
        set -x
        echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
        echo ${DOCKER_PASSWORD} | docker login -u ${TENCENT_DOCKER_USERNAME} --password-stdin uswccr.ccs.tencentyun.com
        echo #echo ${DOCKER_PASSWORD} | docker login -u ${ALIYUN_DOCKER_USERNAME} --password-stdin registry.us-west-1.aliyuncs.com
      name: 'Docker Login'
      env:
        DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
        TENCENT_DOCKER_USERNAME: ${{secrets.TENCENT_DOCKER_USERNAME}}
        ALIYUN_DOCKER_USERNAME: ${{secrets.ALIYUN_DOCKER_USERNAME}}
    - run: |
        cp .env.example .env
        set -ex

        if [ ! `echo $GITHUB_REF | grep 'refs/tags/'` ];then \
          export PLATFORM=linux/amd64; \
          if [ "$PHP_VERSION" = 8_0_X -o "$PHP_VERSION" = nightly ];then \
            export PLATFORM=linux/amd64,linux/arm64,linux/arm/v7; \
            IS_PUSH=--push; \
            mirror="${add_mirror}"; \
          else \
            IS_PUSH=--push; \
            DOCKER_HUB_USERNAME=$DOCKER_HUB_USERNAME_TEST; \
          fi; \
        else \
          IS_PUSH=--push \
          && mirror="${add_mirror}"; \
        fi

        VCS_REF=`git rev-parse --short HEAD`
        options="--build-arg USERNAME=$DOCKER_HUB_USERNAME --build-arg VCS_REF=$VCS_REF --cache-from=${DOCKER_HUB_USERNAME}/php:${FOLDER}-${TYPE,,}-cache --cache-to=${DOCKER_HUB_USERNAME}/php:${FOLDER}-${TYPE,,}-cache"

        if [ "$TYPE" = "UNIT" ];then docker buildx build $options \
          --build-arg ALPINE_URL=${ALPINE_URL:-dl-cdn.alpinelinux.org} \
          -t $DOCKER_HUB_USERNAME/php:${PHP_TAG_VERSION}-unit-alpine \
          $(for item in `echo $mirror`;do echo " -t ${item}:${PHP_TAG_VERSION}-unit-alpine ";done) \
          --platform ${PLATFORM} ${IS_PUSH} ${FOLDER}/unit; \
        fi

        if [ "$TYPE" = "SUPERVISORD" ];then docker buildx build $options \
          --build-arg ALPINE_URL=${ALPINE_URL:-dl-cdn.alpinelinux.org} \
          -t $DOCKER_HUB_USERNAME/php:${PHP_TAG_VERSION}-supervisord-alpine \
          $(for item in `echo $mirror`;do echo " -t ${item}:${PHP_TAG_VERSION}-supervisord-alpine ";done) \
          --platform ${PLATFORM} ${IS_PUSH} ${FOLDER}/supervisord; \
        fi

        if [ "$TYPE" = "COMPOSER" ];then docker buildx build $options \
          --build-arg ALPINE_URL=${ALPINE_URL:-dl-cdn.alpinelinux.org} \
          -t $DOCKER_HUB_USERNAME/php:${PHP_TAG_VERSION}-composer-alpine \
          $(for item in `echo $mirror`;do echo " -t ${item}:${PHP_TAG_VERSION}-composer-alpine ";done) \
          --platform ${PLATFORM} ${IS_PUSH} ${FOLDER}/composer; \
        fi

        if [ "$TYPE" = "SINGLE" ];then docker buildx build $options \
          --build-arg ALPINE_URL=${ALPINE_URL:-dl-cdn.alpinelinux.org} \
          -t $DOCKER_HUB_USERNAME/php:${PHP_TAG_VERSION}-single-alpine \
          ${IS_PUSH} ${FOLDER}/single; \
        fi

        if [ "$TYPE" = "SWOOLE" ];then docker buildx build $options \
          --build-arg ALPINE_URL=${ALPINE_URL:-dl-cdn.alpinelinux.org} \
          -t $DOCKER_HUB_USERNAME/php:${PHP_TAG_VERSION}-swoole-alpine \
          $(for item in `echo $mirror`;do echo " -t ${item}:${PHP_TAG_VERSION}-swoole-alpine ";done) \
          --platform ${PLATFORM} ${IS_PUSH} ${FOLDER}/swoole; \
        fi

        if [ "$TYPE" = "FPM" ];then docker buildx build $options \
          --build-arg ALPINE_URL=${ALPINE_URL:-dl-cdn.alpinelinux.org} \
          --target=php -t $DOCKER_HUB_USERNAME/php:${PHP_TAG_VERSION}-fpm-alpine \
          $(for item in `echo $mirror`;do echo " -t ${item}:${PHP_TAG_VERSION}-fpm-alpine ";done) \
          ${fpmTagOptions} \
          --platform ${PLATFORM} ${IS_PUSH} ${FOLDER}/alpine; \
        fi

        if [ "$TYPE" = "CLI" ];then docker buildx build $options \
          --build-arg ALPINE_URL=${ALPINE_URL:-dl-cdn.alpinelinux.org} \
          -t $DOCKER_HUB_USERNAME/php:${PHP_TAG_VERSION}-cli-alpine \
          $(for item in `echo $mirror`;do echo " -t ${item}:${PHP_TAG_VERSION}-cli-alpine ";done) \
          --platform ${PLATFORM} ${IS_PUSH} ${FOLDER}/cli; \
        fi

        if [ "$TYPE" = "PPM" ];then docker buildx build $options \
          --build-arg ALPINE_URL=${ALPINE_URL:-dl-cdn.alpinelinux.org} \
          -t $DOCKER_HUB_USERNAME/php:${PHP_TAG_VERSION}-ppm-alpine \
          $(for item in `echo $mirror`;do echo " -t ${item}:${PHP_TAG_VERSION}-ppm-alpine ";done) \
          --platform ${PLATFORM} ${IS_PUSH} ${FOLDER}/ppm; \
        fi

        if [ "$TYPE" = "COMPOSER" ];then
            docker buildx build --build-arg PHP_VERSION=${PHP_TAG_VERSION} \
              -t $DOCKER_HUB_USERNAME/php-cs-fixer \
              --platform ${PLATFORM} ${IS_PUSH} php-cs-fixer

            docker buildx build --build-arg PHP_VERSION=${PHP_TAG_VERSION} \
              -t $DOCKER_HUB_USERNAME/sami \
              --platform ${PLATFORM} ${IS_PUSH} sami
        fi

        if [ "$TYPE" != "FPM" ];then exit 0; fi

        docker buildx build --push \
        --build-arg PHP_VERSION=7.0.33 \
        --build-arg USERNAME=khs1994 \
        -t ${DOCKER_HUB_USERNAME}/php:7.0-custom custom/7.0

        docker buildx build --push \
        --build-arg PHP_VERSION=7.3.19 \
        --build-arg USERNAME=khs1994 \
        -t ${DOCKER_HUB_USERNAME}/php:7.1-custom custom/7.1

        echo "full custom"

        docker buildx build \
        --build-arg PHP_EXTENSION_EXTRA="wddx xsl" \
        --build-arg PECL_EXTENSION_EXTRA="imagick msgpack" \
        --build-arg APK_EXTRA="libxslt imagemagick-libs musl" \
        --build-arg APK_DEV_EXTRA="libxslt-dev imagemagick-dev imagemagick" \
        --build-arg PHP_VERSION=${PHP_TAG_VERSION} \
        --build-arg USERNAME=khs1994 \
        --push \
        -t ${DOCKER_HUB_USERNAME}/php:7.3-full-custom 7.3/alpine \
      env:
        DOCKER_HUB_USERNAME: khs1994
        DOCKER_HUB_USERNAME_TEST: lrew
        PLATFORM: linux/amd64,linux/arm64,linux/arm/v7
        PHP_VERSION: 7_3_X
        FOLDER: 7.3
        PHP_TAG_VERSION: 7.3.19
        TYPE: ${{ matrix.TYPE }}
        # add_mirror: uswccr.ccs.tencentyun.com/khs1994/php registry.us-west-1.aliyuncs.com/khs1994/php
      name: 'Build Image'
      shell: bash
    - run: |
        curl -X POST https://hooks.microbadger.com/images/$DOCKER_HUB_USERNAME/php/OMVCEKSr9I0cjhU0DQop3HwjYAc=
      name: 'Trigger hooks'
      env:
        DOCKER_HUB_USERNAME: khs1994
      if: success()
